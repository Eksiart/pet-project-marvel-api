{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","props","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharsListLoaded","newCharList","ended","length","itemsRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","console","log","TransitionGroup","component","renderItems","disabled","comics","to","resourceURI","split","CharInfo","charId","ErrorBoundary","state","error","errorInfo","this","setState","children","CharSearchForm","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","decoration","img","display","width","height","objectFit","margin","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","_baseCharacterOffset","res","_transformCharacter","slice","path","extension","urls","getAllComics","_transformComics","getComic","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/6.9c11b5f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = (props) => {\n\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000)\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n        return (\n            <div className=\"randomchar\">\n                {setContent(process, View, char)}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"){\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharsListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) ended = true;\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRefs.current.forEach(item => item?.classList?.remove('char__item_selected'));\n        itemsRefs.current[id].classList.add('char__item_selected');\n        itemsRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition\n                    key={item.id}\n                    timeout={500}\n                    classNames=\"char__item\"\n                >\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemsRefs.current[i] = el}\n                        key={i}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                console.log('enter press here! ')\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                        }}}\n                    >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"){\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">Homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if (i > 9) return;\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    <Link to={`/comics/${item.resourceURI.split('/')[6]}`}>\n                                        {item.name}\n                                    </Link>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchFrom.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'))\r\n  }\r\n\r\n  const errorMessage = process === 'error' ? <div className=\"char_search-critical-error\"><ErrorMessage/></div> : null;\r\n  const results = !char ? null : char.length > 0 ?\r\n      <div className=\"char__search-wrapper\">\r\n        <div className=\"char__search-success\">\r\n          There is! Visit {char[0].name} page?\r\n        </div>\r\n        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n          <div className=\"inner\">\r\n            To page\r\n          </div>\r\n        </Link>\r\n      </div> :\r\n      <div className=\"char__search-error\">\r\n        The character was not found. Check the name and try again\r\n      </div>;\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik \r\n        initialValues={{\r\n          charName: ''\r\n        }}\r\n        validationSchema= {Yup.object({\r\n          charName: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = { ({charName}) => {\r\n          updateChar(charName);\r\n        }}>\r\n          <Form>\r\n            <label htmlFor=\"charName\" className=\"char__search-label\">Or find a character by name:</label>\r\n            <div className=\"char__search-wrapper\">\r\n              <Field\r\n                id='charName'\r\n                name='charName'\r\n                type='text'\r\n                placeholder='Enter name'/>\r\n              <button\r\n                type='submit'\r\n                className='button button__main'\r\n                disabled={process === 'loading'}>\r\n                <div className=\"inner\">find</div>\r\n              </button>\r\n            </div>\r\n            <FormikErrorMessage component=\"div\" className='char__searc-error' name=\"charName\"/>\r\n          </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  }\r\n  return(\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n          />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm/>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} alt=\"Error\" style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=6ee25e191639a01dff88c6912dd17f12';\r\n  const _baseCharacterOffset = 210;\r\n\r\n  const getAllCharacters = async (/*limit = 9,*/ offset = _baseCharacterOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=${9/*limit*/}&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'Desciription about this character was not found.',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    }\r\n  }\r\n\r\n  const getAllComics = async (/*limit = 9,*/ offset = _baseCharacterOffset) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${8/*limit*/}&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description.',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  return {\r\n    clearError, \r\n    process,\r\n    setProcess,\r\n    getAllCharacters, \r\n    getCharacter, \r\n    getAllComics, \r\n    getComic, \r\n    getCharacterByName\r\n  };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setProcess('loading');\r\n\r\n    try{\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok){\r\n        throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch(e){\r\n      setProcess('error');\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {request, clearError, process ,setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading':\r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data}/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}