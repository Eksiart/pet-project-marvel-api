{"version":3,"sources":["components/pages/SinglePage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["SinglePage","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_jsxs","_Fragment","children","_jsx","AppBanner","setContent","ErrorMessage","src","img","alt","style","display","width","height","objectFit","margin","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_baseCharacterOffset","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","res","results","map","getAllComics","getCharacterByName","Skeleton","className","Spinner","avengers","avengersLogo"],"mappings":"wHAAA,iEAmDeA,UAxCIC,IAA4B,IAA3B,UAACC,EAAS,SAAEC,GAASF,EACvC,MAAM,GAACG,GAAMC,eACNC,EAAMC,GAAWC,mBAAS,OAC3B,SAACC,EAAQ,aAAEC,EAAY,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GAAcC,cAElEC,qBAAU,KACRC,GAAY,GAEX,CAACZ,IAEJ,MAAMY,EAAaA,KAEjB,OADAL,IACQR,GACN,IAAK,QACHM,EAASL,GACNa,KAAKC,GACLD,MAAK,IAAMJ,EAAW,eACzB,MACF,IAAK,YACHH,EAAaN,GACVa,KAAKC,GACLD,MAAK,IAAMJ,EAAW,eAI7B,EAGIK,EAAgBZ,IACpBC,EAAQD,EAAK,EAGf,OACEa,eAAAC,WAAA,CAAAC,SAAA,CACEC,cAACC,IAAS,IACTC,YAAWZ,EAASV,EAAWI,KAC/B,C,kCC/CQ,UAA0B,kC,OCQ1BmB,IANMA,IAEjBH,cAAA,OAAKI,IAAKC,EAAKC,IAAI,QAAQC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,W,6CCmEzGpB,IArEUA,KAEvB,MAAM,QAACqB,EAAO,WAAExB,EAAU,QAAEC,EAAO,WAAEC,GCFhBuB,MACrB,MAAOxB,EAASC,GAAcL,mBAAS,WAEjC2B,EAAUE,uBAAYC,eAAOC,GAAsF,IAAjFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE9F5B,EAAW,WAEX,IACE,MAAMiC,QAAiBC,MAAMR,EAAK,CAACC,SAAQI,OAAMC,YAEjD,IAAIC,EAASE,GACX,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,aAAAW,OAAYJ,EAASK,SAK7D,aAFmBL,EAASM,MAM9B,CAHE,MAAMC,GAEN,MADAxC,EAAW,SACLwC,CACR,CACF,GAAG,IAMH,MAAO,CAAClB,UAASxB,WAJE0B,uBAAY,KAC7BxB,EAAW,UAAU,GACpB,IAE0BD,UAASC,aAAW,EDzBEuB,GAE7CkB,EAAW,4CACXC,EAAU,0CACVC,EAAuB,IAYvBC,EAAuBC,IACpB,CACLtD,GAAIsD,EAAKtD,GACTuD,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,GAAAV,OAAMQ,EAAKE,YAAYC,MAAM,EAAG,KAAI,OAAQ,mDACzEC,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAG3B,IACvB4B,KAAMT,EAAKQ,KAAK,GAAG3B,IACnB6B,OAAQV,EAAKU,OAAOC,QAclBC,EAAoBF,IACjB,CACLhE,GAAIgE,EAAOhE,GACXmE,MAAOH,EAAOG,MACdX,YAAaQ,EAAOR,aAAe,2BACnCY,UAAWJ,EAAOI,UAAS,GAAAtB,OAAMkB,EAAOI,UAAS,OAAQ,2CACzDV,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DS,SAAUL,EAAOM,YAAYD,UAAY,QACzCE,MAAOP,EAAOQ,OAAOD,MAAK,GAAAzB,OAAMkB,EAAOQ,OAAOD,MAAK,KAAM,kBAS7D,MAAO,CACLhE,aACAC,UACAC,aACAgE,iBArDuBvC,iBAAyD,IAAnCwC,EAAMrC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGe,EACtD,MAAMuB,QAAY5C,EAAQ,GAADe,OAAII,EAAQ,oBAAoB,EAAC,YAAAJ,OAAoB4B,EAAM,KAAA5B,OAAIK,IACxF,OAAOwB,EAAIzE,KAAK0E,QAAQC,IAAIxB,EAC9B,EAmDE/C,aAjDmB4B,UACnB,MAAMyC,QAAY5C,EAAQ,GAADe,OAAII,EAAQ,eAAAJ,OAAc9C,EAAE,KAAA8C,OAAIK,IACzD,OAAOE,EAAoBsB,EAAIzE,KAAK0E,QAAQ,GAAG,EAgD/CE,aAjCmB5C,iBAAyD,IAAnCwC,EAAMrC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGe,EAClD,MAAMuB,QAAY5C,EAAQ,GAADe,OAAII,EAAQ,oCAAoC,EAAC,YAAAJ,OAAoB4B,EAAM,KAAA5B,OAAIK,IACxG,OAAOwB,EAAIzE,KAAK0E,QAAQC,IAAIX,EAC9B,EA+BE7D,SA7Be6B,UACf,MAAMyC,QAAY5C,EAAQ,GAADe,OAAII,EAAQ,WAAAJ,OAAU9C,EAAE,KAAA8C,OAAIK,IACrD,OAAOe,EAAiBS,EAAIzE,KAAK0E,QAAQ,GAAG,EA4B5CG,mBAbyB7C,gBACPH,EAAQ,GAADe,OAAII,EAAQ,oBAAAJ,OAAmBS,EAAI,KAAAT,OAAIK,KACrDjD,KAAK0E,QAAQC,IAAIxB,GAY7B,C,oEEjDY2B,MAjBEA,IAETjE,eAAAC,WAAA,CAAAC,SAAA,CACIC,cAAA,KAAG+D,UAAU,eAAchE,SAAC,iDAC5BF,eAAA,OAAKkE,UAAU,WAAUhE,SAAA,CACrBF,eAAA,OAAKkE,UAAU,yBAAwBhE,SAAA,CACnCC,cAAA,OAAK+D,UAAU,2BACf/D,cAAA,OAAK+D,UAAU,4BAEnB/D,cAAA,OAAK+D,UAAU,0BACf/D,cAAA,OAAK+D,UAAU,0BACf/D,cAAA,OAAK+D,UAAU,gCCMhB7D,IAfIA,CAACZ,EAASV,EAAWI,KACtC,OAAQM,GACN,IAAK,UACH,OAAOU,cAAC8D,EAAQ,IAClB,IAAK,UACH,OAAO9D,cAACgE,IAAO,IACjB,IAAK,YACH,OAAOhE,cAACpB,EAAS,CAACI,KAAMA,IAC1B,IAAK,QACH,OAAOgB,cAACG,IAAY,IACtB,QACE,MAAM,IAAIwB,MAAM,4BACpB,C,sFChBa,MAA0B,qCCA1B,MAA0B,0C,OCiB1B1B,IAbGA,IAEVJ,eAAA,OAAKkE,UAAU,cAAahE,SAAA,CACxBC,cAAA,OAAKI,IAAK6D,EAAU3D,IAAI,aACxBT,eAAA,OAAKkE,UAAU,mBAAkBhE,SAAA,CAAC,yBACRC,cAAA,SAAK,iBAG/BA,cAAA,OAAKI,IAAK8D,EAAc5D,IAAI,oB","file":"static/js/6.4f07c746.chunk.js","sourcesContent":["import { useParams } from 'react-router-dom';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nimport './singlePage.scss';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n  const {id} = useParams();\r\n  const [data, setData] = useState(null);\r\n  const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData()\r\n      // eslint-disable-next-line\r\n  }, [id])\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n    switch (dataType) {\r\n      case 'comic':\r\n        getComic(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess('confirmed'))\r\n        break;\r\n      case 'character':\r\n        getCharacter(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess('confirmed'))\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppBanner/>\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SinglePage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} alt=\"Error\" style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=6ee25e191639a01dff88c6912dd17f12';\r\n  const _baseCharacterOffset = 210;\r\n\r\n  const getAllCharacters = async (/*limit = 9,*/ offset = _baseCharacterOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=${9/*limit*/}&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'Desciription about this character was not found.',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    }\r\n  }\r\n\r\n  const getAllComics = async (/*limit = 9,*/ offset = _baseCharacterOffset) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${8/*limit*/}&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description.',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  return {\r\n    clearError, \r\n    process,\r\n    setProcess,\r\n    getAllCharacters, \r\n    getCharacter, \r\n    getAllComics, \r\n    getComic, \r\n    getCharacterByName\r\n  };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setProcess('loading');\r\n\r\n    try{\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok){\r\n        throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch(e){\r\n      setProcess('error');\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {request, clearError, process ,setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading':\r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data}/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}