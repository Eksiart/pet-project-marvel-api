{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","arr","items","map","item","i","to","id","src","thumbnail","alt","title","price","renderItems","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"wNAQMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,cAACG,EAAA,EAAD,IACX,IAAK,UACD,OAAOD,EAAiB,cAACD,EAAD,IAAe,cAACE,EAAA,EAAD,IAC3C,IAAK,YACD,OAAO,cAACF,EAAD,IACX,IAAK,QACD,OAAO,cAACG,EAAA,EAAD,IACX,QACI,MAAM,IAAIC,MAAM,4BAE3B,EAoEcC,EAlEI,WACf,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4CF,oBAAS,GAArD,mBAAOL,EAAP,KAAuBQ,EAAvB,KACA,EAA4BH,mBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEA,EAA4CC,cAArCC,EAAP,EAAOA,aAAchB,EAArB,EAAqBA,QAASiB,EAA9B,EAA8BA,WAE9BC,qBAAU,WACNC,EAAUR,GAAQ,EAErB,GAAE,IAEH,IAAMQ,EAAY,SAACR,EAAQS,GACbV,GAAVU,GACAJ,EAAaL,GACRU,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,YAAjB,GACb,EAEKK,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IAAGD,GAAQ,GAEtCf,GAAc,SAAAD,GAAU,4BAAQA,GAAR,YAAuBe,GAAvB,IACxBb,GAAkB,GAClBE,GAAU,SAAAD,GAAM,OAAIA,EAAS,CAAb,IAChBG,EAAeU,EAClB,EAwBD,OACI,sBAAKE,UAAU,eAAf,UACK3B,EAAWC,GAAS,kBAxB7B,SAAqB2B,GACjB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAMC,GACzB,OACI,oBACAL,UAAU,eADV,SAGI,eAAC,IAAD,CAAMM,GAAE,YAAOF,EAAKG,IAApB,UACI,qBAAKC,IAAKJ,EAAKK,UAAWC,IAAKN,EAAKO,MAAOX,UAAU,qBACrD,qBAAKA,UAAU,oBAAf,SAAoCI,EAAKO,QACzC,qBAAKX,UAAU,qBAAf,SAAqCI,EAAKQ,YAJ7CP,EAQZ,IAED,OACI,oBAAIL,UAAU,eAAd,SACKE,GAGZ,CAIkCW,CAAY/B,EAAlB,GAA+BN,GACpD,wBACAwB,UAAU,mCACVc,SAAUtC,EACVuC,MAAO,CAAC,QAAW5B,EAAc,OAAS,SAC1C6B,QAAS,kBAAMvB,EAAUR,EAAhB,EAJT,SAKI,qBAAKe,UAAU,QAAf,2BAIf,EClEciB,UAhBI,WACjB,OACE,qCACE,eAACC,EAAA,EAAD,WACE,sBACEC,KAAK,cACLC,QAAQ,iCAEV,mDAEF,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,MAGL,C,0FCfc,SAASC,EAAmBrB,GACzC,OCJa,SAA4BA,GACzC,GAAIsB,MAAMC,QAAQvB,GAAM,OAAO,OAAAwB,EAAA,GAAiBxB,EAClD,CDES,CAAkBA,IELZ,SAA0ByB,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,EAC1F,CFGmC,CAAgBzB,IAAQ,OAAA8B,EAAA,GAA2B9B,IGLvE,WACb,MAAM,IAAI+B,UAAU,uIACtB,CHG8F,EAC9F,C","file":"static/js/8.6ba4ddcf.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n    \n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) ended = true;\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li \n                className=\"comics__item\"\n                key={i}>\n                    <Link to={`./${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className='comics__item-img'/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className='comics__list'>\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n            className='button button__main button__long'\n            disabled={newItemLoading}\n            style={{'display': comicsEnded ? 'none' : 'block'}}\n            onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with list of our comics\"\r\n          />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}