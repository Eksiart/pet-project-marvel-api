{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","_jsx","src","alt","style","href","RandomChar","props","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharsListLoaded","newCharList","ended","length","itemsRefs","useRef","focusOnItem","current","forEach","item","_item$classList","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","console","log","TransitionGroup","component","renderItems","disabled","comics","_Fragment","Link","to","concat","resourceURI","split","CharInfo","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","decoration","img","display","width","height","objectFit","margin","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_baseCharacterOffset","_transformCharacter","slice","path","extension","urls","_transformComics","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"mappings":"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","file":"static/js/5.24d8f8b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = (props) => {\n\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000)\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n        return (\n            <div className=\"randomchar\">\n                {setContent(process, View, char)}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"){\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharsListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) ended = true;\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRefs.current.forEach(item => item?.classList?.remove('char__item_selected'));\n        itemsRefs.current[id].classList.add('char__item_selected');\n        itemsRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition\n                    key={item.id}\n                    timeout={500}\n                    classNames=\"char__item\"\n                >\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemsRefs.current[i] = el}\n                        key={i}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                console.log('enter press here! ')\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                        }}}\n                    >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"){\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">Homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if (i > 9) return;\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    <Link to={`/comics/${item.resourceURI.split('/')[6]}`}>\n                                        {item.name}\n                                    </Link>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage/>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchFrom.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'))\r\n  }\r\n\r\n  const errorMessage = process === 'error' ? <div className=\"char_search-critical-error\"><ErrorMessage/></div> : null;\r\n  const results = !char ? null : char.length > 0 ?\r\n      <div className=\"char__search-wrapper\">\r\n        <div className=\"char__search-success\">\r\n          There is! Visit {char[0].name} page?\r\n        </div>\r\n        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n          <div className=\"inner\">\r\n            To page\r\n          </div>\r\n        </Link>\r\n      </div> :\r\n      <div className=\"char__search-error\">\r\n        The character was not found. Check the name and try again\r\n      </div>;\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik \r\n        initialValues={{\r\n          charName: ''\r\n        }}\r\n        validationSchema= {Yup.object({\r\n          charName: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = { ({charName}) => {\r\n          updateChar(charName);\r\n        }}>\r\n          <Form>\r\n            <label htmlFor=\"charName\" className=\"char__search-label\">Or find a character by name:</label>\r\n            <div className=\"char__search-wrapper\">\r\n              <Field\r\n                id='charName'\r\n                name='charName'\r\n                type='text'\r\n                placeholder='Enter name'/>\r\n              <button\r\n                type='submit'\r\n                className='button button__main'\r\n                disabled={process === 'loading'}>\r\n                <div className=\"inner\">find</div>\r\n              </button>\r\n            </div>\r\n            <FormikErrorMessage component=\"div\" className='char__searc-error' name=\"charName\"/>\r\n          </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  }\r\n  return(\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n          />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm/>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} alt=\"Error\" style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=6ee25e191639a01dff88c6912dd17f12';\r\n  const _baseCharacterOffset = 210;\r\n\r\n  const getAllCharacters = async (/*limit = 9,*/ offset = _baseCharacterOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=${9/*limit*/}&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'Desciription about this character was not found.',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    }\r\n  }\r\n\r\n  const getAllComics = async (/*limit = 9,*/ offset = _baseCharacterOffset) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${8/*limit*/}&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description.',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  return {\r\n    clearError, \r\n    process,\r\n    setProcess,\r\n    getAllCharacters, \r\n    getCharacter, \r\n    getAllComics, \r\n    getComic, \r\n    getCharacterByName\r\n  };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setProcess('loading');\r\n\r\n    try{\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if(!response.ok){\r\n        throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch(e){\r\n      setProcess('error');\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {request, clearError, process ,setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading':\r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data}/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}